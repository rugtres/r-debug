// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// tbb_arena_parallelVectorSum
double tbb_arena_parallelVectorSum(NumericVector x);
RcppExport SEXP _RcppParallelNumThreads_tbb_arena_parallelVectorSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tbb_arena_parallelVectorSum(x));
    return rcpp_result_gen;
END_RCPP
}
// tbb_global_control_parallelVectorSum
double tbb_global_control_parallelVectorSum(NumericVector x);
RcppExport SEXP _RcppParallelNumThreads_tbb_global_control_parallelVectorSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tbb_global_control_parallelVectorSum(x));
    return rcpp_result_gen;
END_RCPP
}
// parallelVectorSum
double parallelVectorSum(NumericVector x);
RcppExport SEXP _RcppParallelNumThreads_parallelVectorSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelVectorSum(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppParallelNumThreads_tbb_arena_parallelVectorSum", (DL_FUNC) &_RcppParallelNumThreads_tbb_arena_parallelVectorSum, 1},
    {"_RcppParallelNumThreads_tbb_global_control_parallelVectorSum", (DL_FUNC) &_RcppParallelNumThreads_tbb_global_control_parallelVectorSum, 1},
    {"_RcppParallelNumThreads_parallelVectorSum", (DL_FUNC) &_RcppParallelNumThreads_parallelVectorSum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppParallelNumThreads(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
